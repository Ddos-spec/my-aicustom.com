---
const testimonials = [
  {
    quote: '“AI dari my-aicustom.com mengotomatisasi proses dan mengirit waktu tim.”',
    name: 'John Doe',
    role: 'CEO ABC Company',
    avatar: 'https://i.pravatar.cc/150?img=1',
  },
  {
    quote: '“Layanan supportnya responsif, setup cepat.”',
    name: 'Jane Smith',
    role: 'Marketing Manager XYZ Corp',
    avatar: 'https://i.pravatar.cc/150?img=2',
  },
  {
    quote: '“Integrasi WhatsApp chatbot mempercepat pelayanan customer kami secara nyata.”',
    name: 'David Johnson',
    role: 'IT Director 123 Industries',
    avatar: 'https://i.pravatar.cc/150?img=3',
  },
];
---
<section id="testimonials" class="bg-white py-24 dark:bg-gray-900">
  <div class="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-3xl text-center">
      <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl dark:text-white">Testimoni Sukses</h2>
      <p class="mt-4 text-gray-600 dark:text-gray-300">
        Tim lintas industri mempercayakan akselerasi otomatisasi pada my-aicustom.com.
      </p>
    </div>
    <div
      class="relative mt-16"
      data-testimonial-slider
      data-autoplay-interval="7000"
      role="region"
      aria-label="Slider testimoni pelanggan"
      tabindex="0"
    >
      <button
        type="button"
        class="absolute left-0 top-1/2 z-20 -translate-y-1/2 rounded-full border border-blue-100 bg-white p-3 text-blue-600 shadow-md transition hover:border-blue-200 hover:bg-blue-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-gray-700 dark:bg-gray-800 dark:text-blue-200 dark:hover:bg-gray-700"
        data-prev
        aria-label="Slide sebelumnya"
      >
        <svg class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M15.707 5.293a1 1 0 010 1.414L11.414 11l4.293 4.293a1 1 0 01-1.414 1.414l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 0z" /></svg>
      </button>
      <button
        type="button"
        class="absolute right-0 top-1/2 z-20 -translate-y-1/2 rounded-full border border-blue-100 bg-white p-3 text-blue-600 shadow-md transition hover:border-blue-200 hover:bg-blue-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-gray-700 dark:bg-gray-800 dark:text-blue-200 dark:hover:bg-gray-700"
        data-next
        aria-label="Slide selanjutnya"
      >
        <svg class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M8.293 5.293a1 1 0 011.414 0l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414-1.414L12.586 12 8.293 7.707a1 1 0 010-1.414z" /></svg>
      </button>
      <div class="overflow-hidden rounded-3xl border border-gray-100 bg-white shadow-sm shadow-blue-100 dark:border-gray-800 dark:bg-gray-800">
        <div
          class="flex touch-pan-y select-none transition-transform duration-700 ease-out"
          data-track
          role="list"
          aria-live="polite"
        >
          {testimonials.map((testimonial, index) => (
            <figure
              role="group"
              aria-roledescription="slide"
              aria-label={`Testimoni ${index + 1} dari ${testimonials.length}`}
              class="flex w-full shrink-0 flex-col gap-6 px-6 py-10 sm:px-10"
              data-slide={index}
              aria-hidden={index === 0 ? 'false' : 'true'}
            >
              <svg
                class="h-10 w-10 text-blue-200"
                viewBox="0 0 24 24"
                fill="currentColor"
                aria-hidden="true"
              >
                <path d="M9.5 3A5.5 5.5 0 004 8.5v1A3.5 3.5 0 007.5 13H9v1A4 4 0 015 18a1 1 0 102 0 2 2 0 012-2 2 2 0 002-2V8.5A5.5 5.5 0 009.5 3zM18.5 3A5.5 5.5 0 0013 8.5v1A3.5 3.5 0 0016.5 13H18v1a4 4 0 01-4 4 1 1 0 100 2 6 6 0 006-6V8.5A5.5 5.5 0 0018.5 3z" />
              </svg>
              <blockquote class="text-lg text-gray-700 dark:text-gray-200">{testimonial.quote}</blockquote>
              <figcaption class="flex items-center gap-4 pt-4">
                <img
                  src={testimonial.avatar}
                  alt={`Foto ${testimonial.name}`}
                  class="h-14 w-14 rounded-full object-cover"
                  loading="lazy"
                />
                <div>
                  <p class="font-semibold text-gray-900 dark:text-white">{testimonial.name}</p>
                  <p class="text-sm text-gray-500 dark:text-gray-300">{testimonial.role}</p>
                </div>
              </figcaption>
            </figure>
          ))}
        </div>
      </div>
      <div class="mt-8 flex items-center justify-center gap-3">
        {testimonials.map((testimonial, index) => (
          <button
            type="button"
            class="h-2 w-10 rounded-full bg-blue-100 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 data-[active='true']:bg-blue-600"
            data-dot={index}
            aria-label={`Tampilkan testimoni ${testimonial.name}`}
            aria-pressed={index === 0 ? 'true' : 'false'}
          />
        ))}
      </div>
    </div>
  </div>
</section>
<script is:inline>
  (() => {
    const script = document.currentScript;
    const section = script?.previousElementSibling;
    if (!(section instanceof HTMLElement)) {
      return;
    }
    const sliderRoot = section.querySelector('[data-testimonial-slider]');
    if (!(sliderRoot instanceof HTMLElement)) {
      return;
    }
    const track = sliderRoot.querySelector('[data-track]');
    if (!(track instanceof HTMLElement)) {
      return;
    }
    const slides = Array.from(track.children);
    const dots = Array.from(sliderRoot.querySelectorAll('[data-dot]'));
    const prevButton = sliderRoot.querySelector('[data-prev]');
    const nextButton = sliderRoot.querySelector('[data-next]');
    if (slides.length <= 1) {
      return;
    }
    let index = 0;
    let intervalId;
    let isDragging = false;
    let startX = 0;
    let currentDelta = 0;
    let activePointerId = null;
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const autoplayInterval = Number(sliderRoot.dataset.autoplayInterval) || 6000;

    const setTransition = (value) => {
      track.style.transitionDuration = value;
    };

    const update = () => {
      track.style.transform = `translateX(-${index * 100}%)`;
      slides.forEach((slide, slideIndex) => {
        slide.setAttribute('aria-hidden', slideIndex === index ? 'false' : 'true');
      });
      dots.forEach((dot, dotIndex) => {
        const isActive = dotIndex === index;
        dot.dataset.active = isActive ? 'true' : 'false';
        dot.setAttribute('aria-pressed', isActive ? 'true' : 'false');
      });
    };

    const setIndex = (nextIndex, withAnimation = true) => {
      index = (nextIndex + slides.length) % slides.length;
      if (withAnimation) {
        setTransition('700ms');
      }
      update();
    };

    const stop = () => {
      if (intervalId) {
        window.clearInterval(intervalId);
        intervalId = undefined;
      }
    };

    const start = () => {
      if (prefersReducedMotion) {
        return;
      }
      stop();
      intervalId = window.setInterval(() => setIndex(index + 1), autoplayInterval);
    };

    const handlePointerDown = (event) => {
      if (event.target instanceof HTMLElement && event.target.closest('button')) {
        return;
      }
      isDragging = true;
      startX = event.clientX ?? 0;
      currentDelta = 0;
      activePointerId = event.pointerId ?? null;
      setTransition('0ms');
      stop();
      track.setPointerCapture?.(event.pointerId);
    };

    const handlePointerMove = (event) => {
      if (!isDragging || (activePointerId !== null && event.pointerId !== activePointerId)) {
        return;
      }
      currentDelta = (event.clientX ?? 0) - startX;
      const percentage = (currentDelta / sliderRoot.clientWidth) * 100;
      track.style.transform = `translateX(calc(-${index * 100}% + ${percentage}%))`;
    };

    const handlePointerEnd = (event) => {
      if (!isDragging || (activePointerId !== null && event.pointerId !== activePointerId)) {
        return;
      }
      isDragging = false;
      activePointerId = null;
      const threshold = sliderRoot.clientWidth * 0.15;
      setTransition('700ms');
      if (Math.abs(currentDelta) > threshold) {
        setIndex(index + (currentDelta < 0 ? 1 : -1), false);
      } else {
        update();
      }
      start();
      track.releasePointerCapture?.(event.pointerId);
    };

    dots.forEach((dot, dotIndex) => {
      dot.addEventListener('click', () => {
        setIndex(dotIndex);
        start();
      });
    });

    prevButton?.addEventListener('click', () => {
      setIndex(index - 1);
      start();
    });

    nextButton?.addEventListener('click', () => {
      setIndex(index + 1);
      start();
    });

    sliderRoot.addEventListener('pointerdown', handlePointerDown);
    sliderRoot.addEventListener('pointermove', handlePointerMove);
    sliderRoot.addEventListener('pointerup', handlePointerEnd);
    sliderRoot.addEventListener('pointerleave', handlePointerEnd);
    sliderRoot.addEventListener('pointercancel', handlePointerEnd);

    sliderRoot.addEventListener('keydown', (event) => {
      if (event.key === 'ArrowRight') {
        event.preventDefault();
        setIndex(index + 1);
        start();
      }
      if (event.key === 'ArrowLeft') {
        event.preventDefault();
        setIndex(index - 1);
        start();
      }
    });

    sliderRoot.addEventListener('mouseenter', stop);
    sliderRoot.addEventListener('mouseleave', start);
    sliderRoot.addEventListener('focusin', stop);
    sliderRoot.addEventListener('focusout', start);

    update();
    start();
  })();
</script>
